// FILE: bintree.template
// IMPLEMENTS: The binary_tree node class (see bintree.h for documentation). 
#include <cassert>		// Provides assert
#include <cstdlib>		// Provides NULL, std::size_t
#include <iomanip>    // Provides std::setw
#include <iostream>   // Provides std::cout
#include <algorithm>
#include <cmath>


// start of inorder
template <class Process, class BTNode>
void inorder(Process f, BTNode* node_ptr)
// Library facilities used: cstdlib
{
	if (node_ptr != NULL)
	{
		inorder(f, node_ptr->left( ));
		f( node_ptr->data( ) );
		inorder(f, node_ptr->right( ));
	}
}// end of inorder

// start of postorder
template <class Process, class BTNode>
void postorder(Process f, BTNode* node_ptr)
// Library facilities used: cstdlib
{
	if (node_ptr != NULL)
	{
		postorder(f, node_ptr->left( ));
		postorder(f, node_ptr->right( ));
		f(node_ptr->data( ));
	}
}// end of postorder


// start of preorder
template <class Process, class BTNode>
void preorder(Process f, BTNode* node_ptr)
// Library facilities used: cstdlib
{
	if (node_ptr != NULL)
	{
		f( node_ptr->data( ) );
		preorder(f, node_ptr->left( ));
		preorder(f, node_ptr->right( ));
	}
}// end of preorder


// start of print
template <class Item, class SizeType>
void print(binary_tree_node<Item>* node_ptr, SizeType depth)
// Library facilities used: iomanip, iostream, stdlib
{
	if (node_ptr != NULL)
	{
		print(node_ptr->right( ), depth+1);
		std::cout << std::setw(4*depth) << ""; // Indent 4*depth spaces.
		std::cout << node_ptr->data( ) << std::endl;
		print(node_ptr->left( ),  depth+1);
	}
    }// end of print   
	
	
// start of tree_clear
template <class Item>
void tree_clear(binary_tree_node<Item>*& root_ptr)
// Library facilities used: cstdlib
{
	binary_tree_node<Item>* child;
	if (root_ptr != NULL)
	{
	    child = root_ptr->left( );
	    tree_clear( child );
	    child = root_ptr->right( );
	    tree_clear( child );
	    delete root_ptr;
	    root_ptr = NULL;
	}
}// end of tree_clear


// start of tree_copy
template <class Item>
binary_tree_node<Item>* tree_copy(const binary_tree_node<Item>* root_ptr)
// Library facilities used: cstdlib
{
	binary_tree_node<Item> *l_ptr;
	binary_tree_node<Item> *r_ptr;

	if (root_ptr == NULL)
	{
	    return NULL;
	}
		else{
	    l_ptr = tree_copy( root_ptr->left( ) );
	    r_ptr = tree_copy( root_ptr->right( ) );
	    return
		new binary_tree_node<Item>( root_ptr->data( ), l_ptr, r_ptr);
	}
}// end of tree_copy


// start of tree_size
template <class Item>
size_t tree_size(const binary_tree_node<Item>* node_ptr)
// Library facilities used: cstdlib
{
	if (node_ptr == NULL)
	{
		return 0;
	}
        else{ 
            return
			1 + tree_size(node_ptr->left( )) + tree_size(node_ptr->right( ));
		}    
}// end of tree_size


// start of depth
template <class T>
int depth(binary_tree_node<T> *root){
	if (root == NULL)
	{
		return -1;
	}
	// adding one each time we find parent
	int left = 1 + depth(root->left());
	int right = 1 + depth(root->right());
	// return the one that has max depth
	// using the Math library fuction
	return std::max(left, right);
}// end of depth

// start of max
template <class T>
T max(binary_tree_node<T> *root)
{
	if (root == NULL)
	{
        return -1;
	}
	
	// using recursive thinking to 
	// get left and right nodes
	T left = max(root->left());
	T right = max(root->right());
	
	// chekcing if the root is greater than left
	// and greater than right
	if (root->data() > left && root->data() > right)
	{
		//Return root's data
		return root->data();
	}
	else{
		//Return the maximum value between left and right
		return std::max(left, right);
	}
}// end of max


// start of tree_sum
template <class Item>
double tree_sum(binary_tree_node<Item> *root)
{
	// checking if root is NULL
	if (root == NULL)
	{
		return 0;
	}
	
	// recursively getting sum of tree
	return root->data() + tree_sum(root->left()) + tree_sum(root->right());
}// end of tree_sum


// start of tree_average
template <class Item>
double tree_average(binary_tree_node<Item> *root){
	
	// calling tree_sum to get sum of all nodes in tree
	double sum = tree_sum(root);
	
	// retruning average of of all nodes in tree
	return sum / tree_size(root);
}// end of tree_average


// start of tree_is_balanced
template <class T>
bool tree_is_balanced(binary_tree_node<T> *root){
	
	// getting result after calling balancer
	int result = balancer(root);
	
	// if result is greater than 0 (result > 0)
	// tree is balanced
	if (result > 0)
	{
		return true;
	}
	// tree is not ballanced
	else{
		return false; 
	}
}// end of tree_is_balanced

// start of balancer
template <class T>
int balancer(binary_tree_node<T> *root)
{
	// if root is NULL reture 0
	if (root == NULL)
	{
		return 0;
	}

	// getting left recursively 
	int left = balancer(root->left());
	
	//return -1
	if (left == -1)
	{
		return -1;
	}
	
	// getting right recursively
	int right = balancer(root->right());
	
	//Return -1
	if (right == -1)
	{
		return -1;
	}
	
	// finding difference between left and right
	int difference = left - right;
	
	// getting absoute value of difference
	// if it's greater than 1 return -1
	if (abs(difference) > 1)
	{
		return -1;
	}
	
	//Return 1 + the max of left and right.
	return 1 + std::max(left, right);
}// end of balancer